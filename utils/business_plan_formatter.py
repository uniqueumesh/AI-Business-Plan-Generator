"""
Business plan formatting utilities
"""
from typing import Dict, Any
import streamlit as st
from datetime import datetime

class BusinessPlanFormatter:
    """Handles formatting and display of generated business plans"""
    
    def __init__(self):
        pass
    
    def format_business_plan(self, plan_content: str, company_name: str) -> str:
        """
        Format the business plan content for display
        
        Args:
            plan_content: Raw business plan content from AI
            company_name: Name of the company
            
        Returns:
            Formatted business plan
        """
        # Add header with company name and date
        header = f"""
# Business Plan
**Company:** {company_name}  
**Generated on:** {datetime.now().strftime('%B %d, %Y')}  
**Generated by:** AI Business Plan Generator

---

"""
        
        # Clean up the content
        formatted_content = self._clean_content(plan_content)
        
        return header + formatted_content
    
    def _clean_content(self, content: str) -> str:
        """
        Clean and format the content
        
        Args:
            content: Raw content to clean
            
        Returns:
            Cleaned content
        """
        # Remove any extra whitespace
        content = content.strip()
        
        # Ensure proper spacing between sections
        content = content.replace('\n\n\n', '\n\n')
        
        # Fix common formatting issues
        content = content.replace('** **', '**')
        content = content.replace('* *', '*')
        
        return content
    
    def display_business_plan(self, plan_content: str, company_name: str):
        """
        Display the business plan in Streamlit
        
        Args:
            plan_content: Raw business plan content
            company_name: Name of the company
        """
        formatted_plan = self.format_business_plan(plan_content, company_name)
        
        # Display the plan
        st.markdown(formatted_plan)
        
        # Add download button
        self._add_download_button(formatted_plan, company_name)
    
    def _add_download_button(self, formatted_plan: str, company_name: str):
        """
        Add a download button for the business plan
        
        Args:
            formatted_plan: Formatted business plan content
            company_name: Name of the company
        """
        # Create filename
        safe_company_name = "".join(c for c in company_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        filename = f"{safe_company_name}_Business_Plan_{datetime.now().strftime('%Y%m%d')}.md"
        
        # Create download button
        st.download_button(
            label="ðŸ“¥ Download Business Plan",
            data=formatted_plan,
            file_name=filename,
            mime="text/markdown",
            help="Download your business plan as a Markdown file"
        )
    
    def create_summary_card(self, form_data: Dict[str, Any]) -> str:
        """
        Create a summary card of the form data
        
        Args:
            form_data: Dictionary containing form data
            
        Returns:
            Formatted summary
        """
        summary = f"""
## Business Plan Summary

**Company:** {form_data.get('company_name', 'N/A')}  
**Business Type:** {form_data.get('business_description', 'N/A')[:100]}...  
**Target Market:** {form_data.get('target_market', 'N/A')[:100]}...  
**Mission:** {form_data.get('mission', 'N/A')[:100]}...

---
"""
        return summary
